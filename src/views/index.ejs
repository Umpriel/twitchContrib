<!DOCTYPE html>
<html>
<head>
    <title>TwitchContrib - Code Contributions</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: #e1e1e1;
            background: #1a1a1a;
            padding: 2rem;
        }

        .header {
            background: #9146FF;
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }

        .header h1 {
            font-size: 1.8rem;
            font-weight: 600;
        }

        .header p {
            opacity: 0.9;
            font-size: 1rem;
        }

        .layout {
            display: grid;
            grid-template-columns: 1fr 600px;
            gap: 2rem;
        }

        .history-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .history-title {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
        }

        .pending-section {
            min-width: 0; /* Prevents overflow */
        }

        .history-section {
            background: #252525;
            border-radius: 10px;
            padding: 1.5rem;
            min-height: 4rem;
            max-height: calc(100vh - 8rem);
            position: sticky;
            top: 2rem;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease-out;
        }

        .history-section.collapsed {
            max-height: 4rem;
            overflow: hidden;
        }

        .toggle-history {
            background: none;
            border: none;
            color: #9146FF;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0;
            transition: transform 0.3s ease;
        }

        .toggle-history.expanded {
            transform: rotate(180deg);
        }

        .history-content {
            flex: 1;
            overflow: hidden;
            opacity: 1;
            transition: opacity 0.3s ease-out;
        }

        .history-content.expanded {
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .history-content:not(.expanded) {
            padding: 0;
            margin: 0;
            opacity: 0;
        }

        .history-content::-webkit-scrollbar {
            width: 8px;
        }

        .history-content::-webkit-scrollbar-track {
            background: #2d2d2d;
            border-radius: 4px;
        }

        .history-content::-webkit-scrollbar-thumb {
            background: #444;
            border-radius: 4px;
        }

        .history-content .contribution {
            font-size: 0.9rem;
            padding: 1.25rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            background: #2a2a2a;
            border-left-width: 6px;
        }

        .history-content .contribution:last-child {
            margin-bottom: 0;
        }

        .history-content .code-block {
            max-height: 200px;
            overflow-y: auto;
        }

        .history-content .meta {
            margin-bottom: 0.75rem;
        }

        .history-content .line-info {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-bottom: 0.75rem;
        }

        .section-title {
            color: #9146FF;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: 500;
        }

        .contributions {
            display: grid;
            gap: 1.5rem;
        }

        .contribution {
            background: #2d2d2d;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
        }

        .contribution:hover {
            transform: translateY(-2px);
        }

        .contribution.pending {
            border-left: 4px solid #f0b90b;
        }

        .contribution.accepted {
            border-left: 4px solid #00b894;
        }

        .contribution.rejected {
            border-left: 4px solid #ff7675;
        }

        .meta {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .username {
            color: #9146FF;
            font-weight: 500;
        }

        .filename {
            background: #3d3d3d;
            color: #9146FF;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-family: monospace;
        }

        .code-block {
            background: #1e1e1e;
            color: #f8f8f2;
            padding: 1rem;
            border-radius: 6px;
            font-family: monospace;
            margin: 1rem 0;
            overflow-x: auto;
            border: 1px solid #3d3d3d;
        }

        .status {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status.pending {
            background: #2d2815;
            color: #ffd700;
        }

        .status.accepted {
            background: #1b3329;
            color: #00ff9d;
        }

        .status.rejected {
            background: #3d1f1f;
            color: #ff6b6b;
        }

        .actions {
            margin-top: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        button:hover {
            transform: translateY(-1px);
            filter: brightness(1.1);
        }

        .accept {
            background: #00cc88;
            color: white;
        }

        .reject {
            background: #ff5252;
            color: white;
        }

        .line-info {
            color: #888;
            font-size: 0.9rem;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #888;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>TwitchContrib</h1>
        <p>Review and manage code contributions from your Twitch community</p>
    </div>

    <div class="layout">
        <div class="pending-section">
            <h2 class="section-title">Pending Contributions</h2>
            <div class="contributions">
                <% if (!contributions.some(c => c.status === 'pending')) { %>
                    <div class="empty-state">
                        <h2>No pending contributions</h2>
                        <p>All caught up! Waiting for new contributions.</p>
                    </div>
                <% } %>
                
                <% contributions.filter(c => c.status === 'pending').forEach(function(contribution) { %>
                    <div class="contribution <%= contribution.status %>">
                        <div class="meta">
                            <span class="username">@<%= contribution.username %></span>
                            <span class="filename"><%= contribution.filename %></span>
                            <span class="status <%= contribution.status %>"><%= contribution.status %></span>
                        </div>

                        <div class="line-info">
                            Line: <%= contribution.line_number %>
                            <% if (contribution.character_number) { %>
                                , Character: <%= contribution.character_number %>
                            <% } %>
                        </div>

                        <pre class="code-block"><code><%= contribution.code %></code></pre>

                        <div class="actions">
                            <button class="accept" onclick="updateStatus('<%= contribution.id %>', 'accepted')">Accept</button>
                            <button class="reject" onclick="updateStatus('<%= contribution.id %>', 'rejected')">Reject</button>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="history-container">
            <div class="history-title" onclick="toggleHistory()">
                <h2 class="section-title">History</h2>
                <button class="toggle-history" id="historyToggle">â–¼</button>
            </div>
            <div class="history-section">
                <div class="history-content" id="historyContent">
                    <% contributions.filter(c => c.status !== 'pending')
                        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                        .forEach(function(contribution) { %>
                        <div class="contribution <%= contribution.status %>">
                            <div class="meta">
                                <span class="username">@<%= contribution.username %></span>
                                <span class="status <%= contribution.status %>"><%= contribution.status %></span>
                            </div>
                            <div class="line-info">
                                <%= contribution.filename %> (Line: <%= contribution.line_number %>)
                            </div>
                            <pre class="code-block"><code><%= contribution.code %></code></pre>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function updateStatus(id, status) {
            try {
                const response = await fetch(`/contributions/${id}/status`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                });
                if (response.ok) {
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function toggleHistory() {
            const content = document.getElementById('historyContent');
            const toggle = document.getElementById('historyToggle');
            const section = document.querySelector('.history-section');
            content.classList.toggle('expanded');
            toggle.classList.toggle('expanded');
            section.classList.toggle('collapsed');
        }

        document.addEventListener('DOMContentLoaded', () => {
            toggleHistory();
            document.querySelector('.history-section').classList.remove('collapsed');
        });
    </script>
</body>
</html> 